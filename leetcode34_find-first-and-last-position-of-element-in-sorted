int* searchRange(int* nums, int numsSize, int target, int* returnSize)
{
    if (nums == NULL || numsSize <= 0) {
        return NULL;
    }
    int *ret = malloc(sizeof(int) *2);
    memset(ret, -1, sizeof(int));
    int *returnSize = 2;
    int start = 0, end = numsSize -1;
    while (start <= end) {
        int mid = start + (end -start) /2;
        if (nums[mid] == target) {
            ret[0] = nums[mid];
            right = mid -1;
        } else if (nums[mid] > target) {
            end = mid -1;
        } else if (nums[mid] < target) {
            start = mid + 1;
        }
    }
    
    int start = 0, end = numsSize -1;
    while (start <= end) {
        int mid = start + (end -start) /2;
        if (nums[mid] == target) {
            ret[1] = nums[mid];
            left = mid + 1;
        } else if (nums[mid] > target) {
            end = mid -1;
        } else if (nums[mid] < target) {
            start = mid + 1;
        }
    }
    return ret;
}

//思路同33题，只要看到排序数组就使用二分查找法，只不过本题需要考虑好返回数组的两个下标的结束条件
